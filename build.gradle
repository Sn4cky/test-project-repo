buildscript {
    repositories {
        jcenter()
        
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

repositories {
	mavenCentral()
	maven {	url "http://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/"	}
	
	maven {
		url "${artifactory_contextUrl}/gradle-dev"
		credentials {
            username "${artifactory_user}"
            password "${artifactory_password}"
        }
	}
}
/*
apply plugin: "com.jfrog.artifactory"

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'gradle-dev-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
            
        }
    }
    resolve {
        repository {
            repoKey = 'gradle-dev'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
            
        }
    }
}
*/
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

eclipse.classpath.containers.removeAll(EclipseWtpPlugin.WEB_LIBS_CONTAINER)

import org.apache.tools.ant.filters.ReplaceTokens

ext.smartErpVersion='4.13.9'

 // forces all changing dependencies (i.e. SNAPSHOTs) to automagicially download
    // (thanks, @BillBarnhill!)
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
    }

dependencies {
   
	compile "hu.smartfront:smartfront-crm:${project.ext.smartErpVersion}"
	compile "hu.smartfront:smartfront-service:${project.ext.smartErpVersion}"
	compile "hu.smartfront:smartfront-fixedasset:${project.ext.smartErpVersion}" 
	compile "hu.smartfront:smartfront-document:${project.ext.smartErpVersion}"
	compile "hu.smartfront:smartfront-naveinvoiceinterface:${project.ext.smartErpVersion}"
	compile "hu.smartfront:smartfront-cashflow:${project.ext.smartErpVersion}" 
	compile "hu.smartfront:smartfront-ekaer-inventory:${project.ext.smartErpVersion}" 
	compile "hu.smartfront:smartfront-ecommerce:${project.ext.smartErpVersion}" 
	compile "hu.smartfront:smartfront-mrp:${project.ext.smartErpVersion}" 

      
	compileOnly 'javax.servlet:javax.servlet-api:3.0.1'
	testCompile 'javax.servlet:javax.servlet-api:3.0.1'

	compileOnly 'org.postgresql:postgresql:42.2.4'
	testCompile 'org.postgresql:postgresql:42.2.4'		
	
	testCompile 'junit:junit:4.11'
	testCompile 'org.mockito:mockito-core:2.23.4'
	testCompile 'org.powermock:powermock-api-mockito2:2.0.0-beta.5'
	testCompile 'org.powermock:powermock-module-junit4:2.0.0-beta.5'		
	testCompile 'org.springframework:spring-test:4.2.5.RELEASE'

	compileOnly 'org.apache.tomcat.embed:tomcat-embed-core:7.0.76'
	compileOnly 'org.apache.tomcat.embed:tomcat-embed-jasper:7.0.76'
	compileOnly 'org.apache.tomcat.embed:tomcat-embed-websocket:7.0.76'
	
	compileOnly "hu.smartfront:smartfront-tools:${project.ext.smartErpVersion}"
}

ext.projectTimestamp = new Date().getTime().toString();
ext.projectTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ");

war {
	// linux x64
    filesMatching('**/*.html') {
        filter(ReplaceTokens,
			tokens: ext.properties
		)
    }	
}
 
 import org.apache.tools.ant.taskdefs.condition.Os
 
eclipse.classpath.file {
	whenMerged{ classpath ->
		classpath.entries.removeAll {
			// crossplatform :)
			def doExclude = it.path.contains('build/classes/test') || it.path.contains('build\\classes\\test') || it.path.contains('build/classes/java/test')
			doExclude = doExclude ||  it.path.contains('build/resources/test') || it.path.contains('build\\resources\\test')				
			if ( doExclude ){
				println "${it.path} removed from eclipse project"
			}
			return doExclude
		}
		def lib = new org.gradle.plugins.ide.eclipse.model.Library(fileReference(file('tsbin')))
		lib.exported = true
		classpath.entries << lib
	}
}

task typescript {
	dependsOn ":npmInstall", ":typescriptVersionCheck"
	doLast{
		if(new File(project.projectDir, "tsconfig.json").exists()){		
			if(Os.isFamily(Os.FAMILY_WINDOWS)){
				exec{
					commandLine "cmd", "/c", "node --stack_size=1968 node_modules/typescript/lib/tsc.js -p ${project.projectDir}"						
				}
			}else{
				exec{
					executable "sh"
					args "-c", "\"node_modules/.bin/tsc\" -p ${project.projectDir}"
				}
			}			
		}
	}
}
		
task cleanNodeModules {
	doLast {
		println("deleting: ${project.projectDir}/node_modules/")
		fileTree(dir: "${project.projectDir}/node_modules/", excludes:[".bin", "typescript"]).visit{ def fileVisitDetails ->
			def	file = fileVisitDetails.file
			if(file.isDirectory()){
				delete file
			}
		}
	}
}

task copyDts {
	doLast{
		if (!file(".composite-enable").exists()) {
			copy {
				configurations.compile.findAll { it.name.contains('smartfront') }.each{  from zipTree(it) }
				include 'META-INF/typings/*.d.ts'
				include 'META-INF/resources/framework3/dts/*.d.ts'
				into file('node_modules')
				eachFile { f ->
					f.path = f.path.replaceFirst('META-INF/typings', '')
					f.path = f.path.replaceFirst('META-INF/resources', '')
				}
				includeEmptyDirs false
			}
		}else{
			copy {
				from '../smart-erp'
				include 'node_modules/**/*.d.ts'
				include 'smartfront-core/src/main/resources/META-INF/resources/framework3/dts/*.d.ts'
				eachFile { f ->
					f.path = f.path.replaceFirst('smartfront-core/src/main/resources/META-INF/resources', '')
				}
				into file('node_modules')
				includeEmptyDirs false
			}
		}
	}
}

task createAppHtml {
	doLast{
		copy {
			buildInfo();
			if (file(".composite-enable").exists()) {
				from '../smart-erp/smartfront-core/src/main/resources'
			}else{
				configurations.compile.findAll { it.name.contains('smartfront-core') }.each{  from zipTree(it) }
			}
			include 'META-INF/resources/app.html'
			into file('src/main/webapp')
			eachFile { f ->
				f.path = f.path.replaceFirst('META-INF/resources', '')
		        filter(ReplaceTokens,
		        	tokens: rootProject.ext.properties
				)
			}
			includeEmptyDirs false
		}
	}
}

task npmInstall {
	dependsOn ":copyDts"
	doLast {
		if(Os.isFamily(Os.FAMILY_WINDOWS)){
			exec{
				commandLine "cmd", "/c", "npm install --production"
			}
		}else{
			exec{
				executable "sh"
				args "-c", "npm install --production"
			}
		}
	}
}

task typescriptVersionCheck {
	dependsOn ":npmInstall"
	doLast {
		if(Os.isFamily(Os.FAMILY_WINDOWS)){
			exec{
				commandLine "cmd", "/c", "\"node_modules/.bin/tsc\" -v"
			}
		}else{
			exec{
				executable "sh"
				args "-c", "\"node_modules/.bin/tsc\" -v"
			}
		}
	}
}

processResources {
	dependsOn ":typescript", ":createAppHtml"
    from("tsbin") 
}

def getJenkins(){
	ext.env = System.getenv()
	def isJenkins = false;
	if(ext.env && ext.env.jenkins){
		isJenkins = true;
	}
	return isJenkins;
}

def buildInfo() {
	//release
	def	cmd = "git describe --tags"
	def proc = cmd.execute()
	proc.text.trim().readLines().each { line ->
		if ( line.trim().startsWith("v")){
			ext.projectVersion = line.trim()
		} 
	}
	
	// jenkins detection
	def isJenkins = getJenkins()
	
	if ( isJenkins ){
		ext.projectCommit = ext.env.GIT_COMMIT;
	} else {
		// normal build 
		
		// revision
		println("Local build (not jenkins)");
		cmd = "git rev-parse HEAD"
		proc = cmd.execute()
		ext.projectCommit = proc.text.trim()
		ext.projectVersion = "";
	}
	
	
	println("relase:\t\t" + ext.projectVersion)
	println ("revision:\t" +ext.projectCommit)
	println ("timestamp:\t" + ext.projectTimestamp)

}
